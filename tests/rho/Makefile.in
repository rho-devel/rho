# Low-level tests for the rho classes.

uname = $(shell uname)

VPATH = @srcdir@
srcdir = @srcdir@
top_srcdir = @top_srcdir@

top_builddir = ../..
subdir = tests/rho
R_HOME = $(top_builddir)

include $(top_builddir)/Makeconf

maindir = $(top_srcdir)/src/main

LLVM_CPPFLAGS = @LLVM_CPPFLAGS@
CPPFLAGS := $(CPPFLAGS) $(GTEST_CPPFLAGS) $(LLVM_CPPFLAGS)

EXTRA_LIBS = $(BOOST_LIBS) $(BLAS_LIBS) $(FLIBS) $(R_XTRA_LIBS)  $(READLINE_LIBS) $(LIBS) @LIBINTL@

# Thanks to Jochen Laubrock for suggestions about the handling of
# valgrind on non-Linux platforms.

#valgrind = $(shell type -t valgrind > /dev/null \
#             && echo "valgrind -q --leak-check=yes")

ifdef valgrind
valgrind_flags = -DVALGRIND_LEVEL=2
endif

sources_cxx = ArgMatchertest.cpp Allocatortest.cpp CellPooltest.cpp \
              GCManagertest.cpp MemoryBanktest.cpp \
              RObject_sizer.cpp

unit_test_sources = \
	BuiltInFunctionTest.cpp \
	ControlFlowTests.cpp \
	EvaluationTests.cpp \
	FixedVectorTest.cpp \
	FrameTests.cpp \
	GCRootTest.cpp \
	GCStackFrameBoundaryTests.cpp \
	NodeStackTests.cpp \
	PairListTests.cpp \
	VisibilityTests.cpp \
	@BUILD_LLVM_JIT_TRUE@ MCJITMemoryManagerTests.cpp

UNIT_TEST_OBJECTS = $(unit_test_sources:.cpp=.o)

depends = $(sources_cxx:.cpp=.d) $(unit_test_sources:.cpp=.d)

tests = CellPooltest MemoryBanktest Allocatortest \
        SETLENGTHtest ArgMatchertest0 \
        ArgMatchertest1 ArgMatchertest2 ArgMatchertest3 ArgMatchertest4 \
        ArgMatchertest5 ArgMatchertest6 ArgMatchertest7 ArgMatchertest8 \
	UnitTests

check : $(tests:=.ts)

# Using FORCE in place of a proper dependency on libR.
UnitTests: $(UNIT_TEST_OBJECTS) GTestWithR_main.o FORCE # ../../src/main/libR.a
	$(MAKE) -C $(top_builddir)/src/extra/gtest all
	$(LINK.cc) -o $@ GTestWithR_main.o $(UNIT_TEST_OBJECTS) $(GTEST_LDFLAGS) \
		 -L../../src/main -lR $(MAIN_LDFLAGS) $(EXTRA_LIBS)

FORCE:

UnitTests.ts : UnitTests
	LC_ALL=C LD_LIBRARY_PATH=../../lib R_DEFAULT_PACKAGES=NULL R_HOME=$(R_HOME) ./$<
	touch $@

ArgMatchertest.o : ArgMatchertest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

ifeq ($(uname),Darwin)
ArgMatchertest : ArgMatchertest.o ../../lib/libR.dylib
	ln -sf ../../lib/libR.dylib ../../lib/libRblas.dylib .
	$(LINK.cc) -o $@ $< -L../../lib -lR \
	           $(MAIN_LDFLAGS) $(EXTRA_LIBS)
else
ArgMatchertest : ArgMatchertest.o FORCE # ../../src/main/libR.a
	$(LINK.cc) -o $@ $< -L../../lib -L../../src/main -Wl,-rpath,../../lib \
                   -lR -ldl $(MAIN_LDFLAGS) $(EXTRA_LIBS)
endif

# OK match:
ArgMatchertest0.ts : ArgMatchertest formals_ok.txt supplied_ok.txt \
                     prior_bindings.txt
	$(srcdir)/withldpaths ./$< $(srcdir)/formals_ok.txt $(srcdir)/supplied_ok.txt \
            $(srcdir)/prior_bindings.txt &> ArgMatchertest0.out
	diff $(srcdir)/ArgMatchertest0.save ArgMatchertest0.out
	rm ArgMatchertest0.out
	touch $@
 
# Unnamed formal argument:
ArgMatchertest1.ts : ArgMatchertest formals_unnamed.txt
	$(srcdir)/withldpaths ./$<  $(srcdir)/formals_unnamed.txt /dev/null \
            &> ArgMatchertest1.out
	diff $(srcdir)/ArgMatchertest1.save ArgMatchertest1.out
	rm ArgMatchertest1.out
	touch $@
 
# ... appears twice:
ArgMatchertest2.ts : ArgMatchertest formals_dotstwice.txt
	$(srcdir)/withldpaths ./$< $(srcdir)/formals_dotstwice.txt /dev/null \
            &> ArgMatchertest2.out
	diff $(srcdir)/ArgMatchertest2.save ArgMatchertest2.out
	rm ArgMatchertest2.out
	touch $@
 
# Duplicated formal name:
ArgMatchertest3.ts : ArgMatchertest formals_dupnames.txt
	$(srcdir)/withldpaths ./$< $(srcdir)/formals_dupnames.txt /dev/null \
            &> ArgMatchertest3.out
	diff $(srcdir)/ArgMatchertest3.save ArgMatchertest3.out
	rm ArgMatchertest3.out
	touch $@
 
# Formal arg partially matched by &>1 supplied args:
ArgMatchertest4.ts : ArgMatchertest formals_ok.txt supplied_pm2supp.txt
	$(srcdir)/withldpaths ./$< $(srcdir)/formals_ok.txt \
            $(srcdir)/supplied_pm2supp.txt &> ArgMatchertest4.out
	diff $(srcdir)/ArgMatchertest4.save ArgMatchertest4.out
	rm ArgMatchertest4.out
	touch $@
 
# Supplied arg partially matches &>1 formal args:
ArgMatchertest5.ts : ArgMatchertest formals_ok.txt supplied_pm2form.txt
	$(srcdir)/withldpaths ./$< $(srcdir)/formals_ok.txt \
            $(srcdir)/supplied_pm2form.txt &> ArgMatchertest5.out
	diff $(srcdir)/ArgMatchertest5.save ArgMatchertest5.out
	rm ArgMatchertest5.out
	touch $@
 
# Surplus supplied args:
ArgMatchertest6.ts : ArgMatchertest formals_ok.txt supplied_surplus.txt
	$(srcdir)/withldpaths ./$< $(srcdir)/formals_nodots.txt \
            $(srcdir)/supplied_surplus.txt &> ArgMatchertest6.out
	diff $(srcdir)/ArgMatchertest6.save ArgMatchertest6.out
	rm ArgMatchertest6.out
	touch $@
 
# ... with default:
ArgMatchertest7.ts : ArgMatchertest formals_dotsdflt.txt
	$(srcdir)/withldpaths ./$< $(srcdir)/formals_dotsdflt.txt /dev/null \
            &> ArgMatchertest7.out
	diff $(srcdir)/ArgMatchertest7.save ArgMatchertest7.out
	rm ArgMatchertest7.out
	touch $@
 
# Non-null match to '...', plus attempted partial match to formal following ... :
ArgMatchertest8.ts : ArgMatchertest formals_ok.txt supplied_surplus.txt \
                     prior_bindings.txt
	$(srcdir)/withldpaths ./$< $(srcdir)/formals_ok.txt \
            $(srcdir)/supplied_surplus.txt $(srcdir)/prior_bindings.txt \
            &> ArgMatchertest8.out
	diff $(srcdir)/ArgMatchertest8.save ArgMatchertest8.out
	rm ArgMatchertest8.out
	touch $@
 
Allocatortest.o : Allocatortest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

Allocatortest_objs = Allocatortest.o MemoryBank.o CellPool.o

Allocatortest : $(Allocatortest_objs)
	$(LINK.cc) -o $@ $(Allocatortest_objs)

Allocatortest.ts : Allocatortest Allocatortest.save
	$(valgrind) ./$< 10 12 > Allocatortest.out
	diff $(srcdir)/Allocatortest.save Allocatortest.out
	rm Allocatortest.out
	touch $@

CellPool.o : $(maindir)/CellPool.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

CellPooltest.o : CellPooltest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

CellPooltest_objs = CellPooltest.o CellPool.o

CellPooltest : $(CellPooltest_objs)
	$(LINK.cc) -o $@ $(CellPooltest_objs)

CellPooltest.ts : CellPooltest CellPooltest.save
	$(valgrind) ./$< > CellPooltest.out
	diff $(srcdir)/CellPooltest.save CellPooltest.out
	rm CellPooltest.out
	touch $@

GCManager.o : $(maindir)/GCManager.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -DDEBUG_ADJUST_HEAP -c -o $@ $<

GCManagertest_objs = GCManagertest.o CellPool.o GCManager.o MemoryBank.o

GCManagertest : $(GCManagertest_objs)
	$(LINK.cc) -o $@ $(GCManagertest_objs)

GCManagertest.ts : GCManagertest GCManagertest.save
	./$< > GCManagertest.out
	grep -v '^#' $(srcdir)/GCManagertest.save | diff - GCManagertest.out
	rm GCManagertest.out
	touch $@

GCNode.o : $(maindir)/GCNode.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -DDEBUG_ADJUST_HEAP -c -o $@ $<

GCRoot.o : $(maindir)/GCRoot.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -DDEBUG_ADJUST_HEAP -c -o $@ $<

MemoryBank.o : $(maindir)/MemoryBank.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -DR_MEMORY_PROFILING -c -o $@ $<

MemoryBanktest.o : MemoryBanktest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -DR_MEMORY_PROFILING -c -o $@ $<

MemoryBanktest_objs = MemoryBanktest.o MemoryBank.o CellPool.o

MemoryBanktest : $(MemoryBanktest_objs)
	$(LINK.cc) -o $@ $(MemoryBanktest_objs)

MemoryBanktest.ts : MemoryBanktest MemoryBanktest.save
	$(valgrind) ./$< 10 12 > MemoryBanktest.out
	diff $(srcdir)/MemoryBanktest.save MemoryBanktest.out
	rm MemoryBanktest.out
	touch $@

ifeq ($(uname),Darwin)
SETLENGTHtest : SETLENGTHtest.o ../../lib/libR.dylib
	ln -sf ../../lib/libR.dylib ../../lib/libRblas.dylib .
	$(LINK.cc) -o $@ $< -L../../lib -lR \
	           $(MAIN_LDFLAGS) $(EXTRA_LIBS)
else
SETLENGTHtest : SETLENGTHtest.o  FORCE # ../../src/main/libR.a
	$(LINK.cc) -o $@ $< -L../../lib -L../../src/main -Wl,-rpath,../../lib \
		   -Wl,-rpath,$(BOOST_LD_LIBRARY_PATH) \
                   -lR -ldl $(MAIN_LDFLAGS) $(EXTRA_LIBS)
endif

SETLENGTHtest.ts : SETLENGTHtest SETLENGTHtest.save
	-./$< > SETLENGTHtest.out 2>&1
	diff $(srcdir)/SETLENGTHtest.save SETLENGTHtest.out
	rm SETLENGTHtest.out
	touch $@

RObject_sizer : RObject_sizer.o FORCE #../../src/main/libR.a
	$(LINK.cc) -o $@ $< -L../../lib -L../../src/main -Wl,-rpath,../../lib \
                   -lR -ldl $(MAIN_LDFLAGS) $(EXTRA_LIBS)

Makefile : $(srcdir)/Makefile.in $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean:
	rm -f *.d *.o *.ts $(tests)

distclean: clean
	rm -f Makefile

include $(depends)
